/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.0
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace picoLcmData
{
    public sealed class bodyData : LCM.LCM.LCMEncodable
    {
        public float[] pos;
        public float[] euler;
        public float[] rot;
 
        public bodyData()
        {
            pos = new float[72];
            euler = new float[72];
            rot = new float[96];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x805120b1232e330bL;
 
        static bodyData()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("picoLcmData.bodyData"))
                return 0L;
 
            classes.Add("picoLcmData.bodyData");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            for (int a = 0; a < 72; a++) {
                outs.Write(this.pos[a]); 
            }
 
            for (int a = 0; a < 72; a++) {
                outs.Write(this.euler[a]); 
            }
 
            for (int a = 0; a < 96; a++) {
                outs.Write(this.rot[a]); 
            }
 
        }
 
        public bodyData(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public bodyData(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static picoLcmData.bodyData _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            picoLcmData.bodyData o = new picoLcmData.bodyData();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.pos = new float[(int) 72];
            for (int a = 0; a < 72; a++) {
                this.pos[a] = ins.ReadSingle();
            }
 
            this.euler = new float[(int) 72];
            for (int a = 0; a < 72; a++) {
                this.euler[a] = ins.ReadSingle();
            }
 
            this.rot = new float[(int) 96];
            for (int a = 0; a < 96; a++) {
                this.rot[a] = ins.ReadSingle();
            }
 
        }
 
        public picoLcmData.bodyData Copy()
        {
            picoLcmData.bodyData outobj = new picoLcmData.bodyData();
            outobj.pos = new float[(int) 72];
            for (int a = 0; a < 72; a++) {
                outobj.pos[a] = this.pos[a];
            }
 
            outobj.euler = new float[(int) 72];
            for (int a = 0; a < 72; a++) {
                outobj.euler[a] = this.euler[a];
            }
 
            outobj.rot = new float[(int) 96];
            for (int a = 0; a < 96; a++) {
                outobj.rot[a] = this.rot[a];
            }
 
            return outobj;
        }
    }
}

