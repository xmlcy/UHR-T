/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.0
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace picoLcmData
{
    public sealed class picoData : LCM.LCM.LCMEncodable
    {
        public float primary2DAxisRight_x;
        public float primary2DAxisRight_y;
        public float primary2DAxisLeft_x;
        public float primary2DAxisLeft_y;
        public bool primary2DAxisClickRight;
        public bool primary2DAxisClickLeft;
        public bool triggerButtonValueLeft;
        public float triggerValueLeft;
        public bool triggerButtonValueRight;
        public float triggerValueRight;
        public bool gripButtonValueLeft;
        public float gripValueLeft;
        public bool gripButtonValueRight;
        public float gripValueRight;
        public bool primaryButtonX;
        public bool primaryButtonA;
        public bool primaryButtonY;
        public bool primaryButtonB;
        public float[] hand_pos;
        public float[] hand_euler;
        public float[] hand_rot;
 
        public picoData()
        {
            hand_pos = new float[6];
            hand_euler = new float[6];
            hand_rot = new float[8];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x1a41ff7a148ebbe9L;
 
        static picoData()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("picoLcmData.picoData"))
                return 0L;
 
            classes.Add("picoLcmData.picoData");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.primary2DAxisRight_x); 
 
            outs.Write(this.primary2DAxisRight_y); 
 
            outs.Write(this.primary2DAxisLeft_x); 
 
            outs.Write(this.primary2DAxisLeft_y); 
 
            outs.Write(this.primary2DAxisClickRight); 
 
            outs.Write(this.primary2DAxisClickLeft); 
 
            outs.Write(this.triggerButtonValueLeft); 
 
            outs.Write(this.triggerValueLeft); 
 
            outs.Write(this.triggerButtonValueRight); 
 
            outs.Write(this.triggerValueRight); 
 
            outs.Write(this.gripButtonValueLeft); 
 
            outs.Write(this.gripValueLeft); 
 
            outs.Write(this.gripButtonValueRight); 
 
            outs.Write(this.gripValueRight); 
 
            outs.Write(this.primaryButtonX); 
 
            outs.Write(this.primaryButtonA); 
 
            outs.Write(this.primaryButtonY); 
 
            outs.Write(this.primaryButtonB); 
 
            for (int a = 0; a < 6; a++) {
                outs.Write(this.hand_pos[a]); 
            }
 
            for (int a = 0; a < 6; a++) {
                outs.Write(this.hand_euler[a]); 
            }
 
            for (int a = 0; a < 8; a++) {
                outs.Write(this.hand_rot[a]); 
            }
 
        }
 
        public picoData(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public picoData(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static picoLcmData.picoData _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            picoLcmData.picoData o = new picoLcmData.picoData();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.primary2DAxisRight_x = ins.ReadSingle();
 
            this.primary2DAxisRight_y = ins.ReadSingle();
 
            this.primary2DAxisLeft_x = ins.ReadSingle();
 
            this.primary2DAxisLeft_y = ins.ReadSingle();
 
            this.primary2DAxisClickRight = ins.ReadBoolean();
 
            this.primary2DAxisClickLeft = ins.ReadBoolean();
 
            this.triggerButtonValueLeft = ins.ReadBoolean();
 
            this.triggerValueLeft = ins.ReadSingle();
 
            this.triggerButtonValueRight = ins.ReadBoolean();
 
            this.triggerValueRight = ins.ReadSingle();
 
            this.gripButtonValueLeft = ins.ReadBoolean();
 
            this.gripValueLeft = ins.ReadSingle();
 
            this.gripButtonValueRight = ins.ReadBoolean();
 
            this.gripValueRight = ins.ReadSingle();
 
            this.primaryButtonX = ins.ReadBoolean();
 
            this.primaryButtonA = ins.ReadBoolean();
 
            this.primaryButtonY = ins.ReadBoolean();
 
            this.primaryButtonB = ins.ReadBoolean();
 
            this.hand_pos = new float[(int) 6];
            for (int a = 0; a < 6; a++) {
                this.hand_pos[a] = ins.ReadSingle();
            }
 
            this.hand_euler = new float[(int) 6];
            for (int a = 0; a < 6; a++) {
                this.hand_euler[a] = ins.ReadSingle();
            }
 
            this.hand_rot = new float[(int) 8];
            for (int a = 0; a < 8; a++) {
                this.hand_rot[a] = ins.ReadSingle();
            }
 
        }
 
        public picoLcmData.picoData Copy()
        {
            picoLcmData.picoData outobj = new picoLcmData.picoData();
            outobj.primary2DAxisRight_x = this.primary2DAxisRight_x;
 
            outobj.primary2DAxisRight_y = this.primary2DAxisRight_y;
 
            outobj.primary2DAxisLeft_x = this.primary2DAxisLeft_x;
 
            outobj.primary2DAxisLeft_y = this.primary2DAxisLeft_y;
 
            outobj.primary2DAxisClickRight = this.primary2DAxisClickRight;
 
            outobj.primary2DAxisClickLeft = this.primary2DAxisClickLeft;
 
            outobj.triggerButtonValueLeft = this.triggerButtonValueLeft;
 
            outobj.triggerValueLeft = this.triggerValueLeft;
 
            outobj.triggerButtonValueRight = this.triggerButtonValueRight;
 
            outobj.triggerValueRight = this.triggerValueRight;
 
            outobj.gripButtonValueLeft = this.gripButtonValueLeft;
 
            outobj.gripValueLeft = this.gripValueLeft;
 
            outobj.gripButtonValueRight = this.gripButtonValueRight;
 
            outobj.gripValueRight = this.gripValueRight;
 
            outobj.primaryButtonX = this.primaryButtonX;
 
            outobj.primaryButtonA = this.primaryButtonA;
 
            outobj.primaryButtonY = this.primaryButtonY;
 
            outobj.primaryButtonB = this.primaryButtonB;
 
            outobj.hand_pos = new float[(int) 6];
            for (int a = 0; a < 6; a++) {
                outobj.hand_pos[a] = this.hand_pos[a];
            }
 
            outobj.hand_euler = new float[(int) 6];
            for (int a = 0; a < 6; a++) {
                outobj.hand_euler[a] = this.hand_euler[a];
            }
 
            outobj.hand_rot = new float[(int) 8];
            for (int a = 0; a < 8; a++) {
                outobj.hand_rot[a] = this.hand_rot[a];
            }
 
            return outobj;
        }
    }
}

